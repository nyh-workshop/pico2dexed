diff --git a/src/dexed.cpp b/src/dexed.cpp
index cf501f8..507f678 100644
--- a/src/dexed.cpp
+++ b/src/dexed.cpp
@@ -80,7 +80,9 @@ Dexed::Dexed(uint8_t maxnotes, int rate)
   setEngineType(MKI);
 
 #ifndef TEENSYDUINO
+#ifndef RASPBERRYPI_PICO
   compressor = new Compressor(samplerate);
+#endif
 #endif
   use_compressor = false;
 }
@@ -228,20 +230,69 @@ void Dexed::getSamples(float32_t* buffer, uint16_t n_samples)
     }
   }
 
-  fx.process(buffer, n_samples); // Needed for fx.Gain()!!!
+//  fx.process(buffer, n_samples); // Needed for fx.Gain()!!!
 
 #ifndef TEENSYDUINO
+#ifndef RASPBERRYPI_PICO
   if (use_compressor == true)
     compressor->doCompression(buffer, n_samples);
 #endif
+#endif
 }
 
 void Dexed::getSamples(int16_t* buffer, uint16_t n_samples)
 {
+#if 0
   float32_t tmp[n_samples];
 
   getSamples(tmp, n_samples);
   arm_float_to_q15(tmp, (q15_t*)buffer, n_samples);
+#else
+  if (refreshVoice)
+  {
+    for (uint8_t i = 0; i < max_notes; i++)
+    {
+      if ( voices[i].live )
+        voices[i].dx7_note->update(data, voices[i].midi_note, voices[i].velocity, voices[i].porta, &controllers);
+    }
+    lfo.reset(data + 137);
+    refreshVoice = false;
+  }
+
+//  arm_fill_f32(0, buffer, n_samples);
+  for (uint16_t i = 0; i < n_samples; ++i)
+  {
+    buffer[i] = 0;
+  }
+
+  for (uint16_t i = 0; i < n_samples; i += _N_)
+  {
+    AlignedBuf<int32_t, _N_> audiobuf;
+
+    for (uint8_t j = 0; j < _N_; ++j)
+    {
+      audiobuf.get()[j] = 0;
+    }
+
+    int32_t lfovalue = lfo.getsample();
+    int32_t lfodelay = lfo.getdelay();
+
+    for (uint8_t note = 0; note < max_notes; note++)
+    {
+      if (voices[note].live)
+      {
+        voices[note].dx7_note->compute(audiobuf.get(), lfovalue, lfodelay, &controllers);
+
+        for (uint8_t j = 0; j < _N_; ++j)
+        {
+          int16_t tmp = audiobuf.get()[j] >> (16 + simple_gain);
+          buffer[i + j] += tmp;
+          audiobuf.get()[j] = 0;
+        }
+      }
+    }
+  }
+#endif
 }
 
 void Dexed::keydown(int16_t pitch, uint8_t velo) {
@@ -1193,6 +1244,27 @@ float Dexed::getFilterResonance(void)
   return (fx.Reso);
 }
 
+#define FULL_ATTN 16
+void Dexed::setGain(uint8_t gain)
+{
+    // Use gain as a bit-shift when calculating samples.
+    //
+    // High gain (127+) = no shift
+    // Zero gain (0) = full shift to leave 0
+    //
+    // NB: Pretty much any gain > 7 is essentially silence...
+    if (gain > 120) simple_gain = 0;
+    else if (gain > 100) simple_gain = 1;
+    else if (gain > 80) simple_gain = 2;
+    else if (gain > 50) simple_gain = 3;
+    else if (gain > 30) simple_gain = 4;
+    else if (gain > 20) simple_gain = 5;
+    else if (gain > 10) simple_gain = 6;
+    else simple_gain = FULL_ATTN;
+
+    fprintf(stderr, "Set Gain: %d", simple_gain);
+}
+
 void Dexed::setGain(float gain)
 {
   fx.Gain = gain;
@@ -1754,6 +1826,7 @@ void Dexed::setVelocityScale(uint8_t setup = MIDI_VELOCITY_SCALING_OFF)
 }
 
 #ifndef TEENSYDUINO
+#ifndef RASPBERRYPI_PICO
 void Dexed::setCompressor(bool enable_compressor)
 {
   use_compressor = enable_compressor;
@@ -1814,3 +1887,4 @@ float32_t Dexed::getCompressionRatio(void)
   return (compressor->getCompressionRatio());
 }
 #endif
+#endif
